/* 
   Telegram Publisher Expert Advisor
   Copyright 2022, Orchard Forex 
   https://www.orchardforex.com 
*/ 

/**= 
 * 
 * Disclaimer and Licence 
 * 
 * This file is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 * 
 * All trading involves risk. You should have received the risk warnings 
 * and terms of use in the README.MD file distributed with this software. 
 * See the README.MD file for more information and before using this software. 
 * 
 **/ 

#property copyright "Copyright 2022, Orchard Forex" 
#property link "https://www.orchardforex.com" 
#property version "1.00" 
//#property script_show_inputs 
//#property script_show_confirm 

#property strict 

const string TelegramBotToken = "7075411352:AAHjZ-D_yLKRuOPz-GSDcYqFE9t70gK1JoE"; 
const string ChatId = "-4174598401"; 
const string TelegramApiUrl = "https://api.telegram.org"; // Add this to Allow URLs 

const int UrlDefinedError = 4066; // Because MT4 and MT5 are different 

void OnTick() { 
   // Simulação de sinal de compra 
   bool buySignal = CheckBuySignal(); 

   // Simulação de sinal de venda 
   bool sellSignal = CheckSellSignal(); 

   // Envio de sinais para o Telegram 
   if (buySignal) { 
      SendTelegramMessage(TelegramApiUrl, TelegramBotToken, ChatId, "Sinal de COMPRA gerado!"); 
   } 

   if (sellSignal) { 
      SendTelegramMessage(TelegramApiUrl, TelegramBotToken, ChatId, "Sinal de VENDA gerado!"); 
   } 
} 

bool SendTelegramMessage(string url, string token, string chat, string text, string fileName = "") { 
   string headers = ""; 
   string requestUrl = ""; 
   char postData[]; 
   char resultData[]; 
   string resultHeaders; 
   int timeout = 5000; // 1 second, may be too short for a slow connection 

   ResetLastError(); 

   if (fileName == "") { 
      requestUrl = StringFormat("%s/bot%s/sendmessage?chat_id=%s&text=%s", url, token, chat, text); 
   } 
   else { 
      requestUrl = StringFormat("%s/bot%s/sendPhoto", url, token); 
      if (!GetPostData(postData, headers, chat, text, fileName)) { 
         return (false); 
      } 
   } 

   ResetLastError(); 
   int response = WebRequest("POST", requestUrl, headers, timeout, postData, resultData, resultHeaders); 

   switch (response) { 
      case -1: { 
         int errorCode = GetLastError(); 
         Print("Error in WebRequest. Error code =", errorCode); 
         if (errorCode == UrlDefinedError) { 
            //--- url may not be listed 
            PrintFormat("Add the address '%s' in the list of allowed URLs", url); 
         } 
         break; 
      } 
      case 200: 
         //--- Success 
         Print("The message has been successfully sent"); 
         break; 
      default: { 
         string result = CharArrayToString(resultData); 
         PrintFormat("Unexpected Response '%i', '%s'", response, result); 
         break; 
      } 
   } 

   return (response == 200); 
} 

bool GetPostData(char &postData[], string &headers, string chat, string text, string fileName) { 
   ResetLastError(); 

   if (!FileIsExist(fileName)) { 
      PrintFormat("File '%s' does not exist", fileName); 
      return (false); 
   } 

   int flags = FILE_READ | FILE_BIN; 
   int file = FileOpen(fileName, flags); 
   if (file == INVALID_HANDLE) { 
      int err = GetLastError(); 
      PrintFormat("Could not open file '%s', error=%i", fileName, err); 
      return (false); 
   } 

   int fileSize = (int)FileSize(file); 
   uchar photo[]; 
   ArrayResize(photo, fileSize); 
   FileReadArray(file, photo, 0, fileSize); 
   FileClose(file); 

   string hash = ""; 
   AddPostData(postData, hash, "chat_id", chat); 
   if (StringLen(text) > 0) { 
      AddPostData(postData, hash, "caption", text); 
   } 
   AddPostData(postData, hash, "photo", photo, fileName); 
   ArrayCopy(postData, "--" + hash + "--\r\n"); 

   headers = "Content-Type: multipart/form-data; boundary=" + hash + "\r\n"; 

   return (true); 
} 

void AddPostData(uchar &data[], string &hash, string key = "", string value = "") { 
   uchar valueArr[]; 
   StringToCharArray(value, valueArr, 0, StringLen(value)); 

   AddPostData(data, hash, key, valueArr); 
   return; 
} 

void AddPostData(uchar &data[], string &hash, string key, uchar &value[], string fileName = "") { 
   if (hash == "") { 
      hash = Hash(); 
   } 

   ArrayCopy(data, "\r\n"); 
   ArrayCopy(data, "--" + hash + "\r\n"); 
   if (fileName == "") { 
      ArrayCopy(data, "Content-Disposition: form-data; name=\"" + key + "\"\r\n"); 
   } 
   else { 
      ArrayCopy(data, "Content-Disposition: form-data; name=\"" + key + "\"; filename=\"" + fileName + "\"\r\n"); 
   } 
   ArrayCopy(data, "\r\n"); 
   ArrayCopy(data, value, ArraySize(data)); 
   ArrayCopy(data, "\r\n"); 

   return; 
} 

void ArrayCopy(uchar &dst[], string src) { 
   uchar srcArray[]; 
   StringToCharArray(src, srcArray, 0, StringLen(src)); 
   ArrayCopy(dst, srcArray, ArraySize(dst), 0, ArraySize(srcArray)); 
   return; 
} 

string Hash() { 
   uchar tmp[]; 
   string seed = IntegerToString(TimeCurrent()); 
   int len = StringToCharArray(seed, tmp, 0, StringLen(seed)); 
   string hash = ""; 
   for (int i = 0; i < len; i++) 
      hash += StringFormat("%02X", tmp[i]); 
   hash = StringSubstr(hash, 0, 16); 

   return (hash); 
} 

bool CheckBuySignal() { 
   // Simulação de um sinal de compra fictício 
   // Aqui você pode implementar sua própria lógica de geração de sinais de compra 
   // Por exemplo, verificação de cruzamento de médias móveis, padrões de velas, etc. 
   // Retorne verdadeiro se um sinal de compra for gerado, falso caso contrário 
   if (iCustom(NULL, 0, "ExpertMichel", 0, 1) == 1) {
       return true; // Seta de compra detectada
   }
   return false; // Nenhuma seta de compra detectada
} 

bool CheckSellSignal() { 
   // Simulação de um sinal de venda fictício 
   // Aqui você pode implementar sua própria lógica de geração de sinais de venda 
   // Por exemplo, verificação de cruzamento de médias móveis, padrões de velas, etc. 
   // Retorne verdadeiro se um sinal de venda for gerado, falso caso contrário 
   if (iCustom(NULL, 0, "ExpertMichel", 0, 0) == 1) {
       return true; // Seta de venda detectada
   }
   return false; // Nenhuma seta de venda detectada
}